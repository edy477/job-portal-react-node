"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AuthResponse {
  refreshToken: String!
  token: String!
  user: User!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

type JobType {
  id: Float!
  job_type: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  registerJobType(data: RegisterJobTypeInput!): JobType!
  getSignedS3UrlForPut(data: S3SignedUrlInput!): SignedResponse
  getBulkSignedS3UrlForPut(data: S3BulkSignedUrlInput!): [SignedResponse!]
  updateMe(data: UpdateUserInput!): User!
  login(data: LoginInput!): AuthResponse!
  register(data: RegisterInput!): AuthResponse!
  forgotPassword(email: String!): Boolean!
  destroyAccount: Boolean!
  resetPassword(data: ResetPasswordInput!): Boolean!
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  notIn: [Role!]
  not: NestedEnumRoleFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

type Query {
  getSignedS3UrlForGet(key: String!): String
  user(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): UsersResponse!
  me: User
  refreshToken(refreshToken: String!): RefreshTokenResponse!
}

enum QueryMode {
  default
  insensitive
}

type RefreshTokenResponse {
  refreshToken: String!
  token: String!
}

input RegisterInput {
  firstName: String!
  lastName: String!
  password: String!
  email: String!
}

input RegisterJobTypeInput {
  job_type: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

enum Role {
  USER
  ADMIN
}

input S3BulkSignedUrlInput {
  files: [S3SignedUrlInput!]!
}

input S3SignedUrlInput {
  key: String!
  fileType: String!
}

type SignedResponse {
  uploadUrl: String!
  url: String!
  key: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  avatar: String
  bio: String
  password: String
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  bio: String
  role: Role!
  fullName: String!
  avatar: String
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  avatar: SortOrder
  role: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum UserScalarFieldEnum {
  id
  email
  password
  firstName
  lastName
  avatar
  role
  bio
  createdAt
  updatedAt
}

type UsersResponse {
  count: Int!
  items: [User!]!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  password: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  avatar: StringNullableFilter
  role: EnumRoleFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  id: String
  email: String
}

